# -*- coding: utf-8 -*-
"""Back_tested.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yqMc0A-tQaW6AB8AfEmavYcx-bWonvF0
"""

import pandas as pd
import matplotlib.pyplot as plt


# Step 1: Load Historical Data
# Load historical price and volume data into a pandas DataFrame
historical_data = pd.read_csv('/content/drive/MyDrive/Gold Price prediction/goldstock.csv', parse_dates=['Date'], index_col='Date')

historical_data.head()

historical_data.drop(['Unnamed: 0'], axis = 1, inplace=True)

historical_data.head()

historical_data.rename(columns={'Close': 'Price'}, inplace=True)

historical_data.head()

# Step 2: Define Trading Signals (example)
# For demonstration purposes, let's assume a simple moving average crossover strategy
# Generate buy signals when the short-term moving average crosses above the long-term moving average
historical_data['short_ma'] = historical_data['Price'].rolling(window=20).mean()
historical_data['long_ma'] = historical_data['Price'].rolling(window=50).mean()
historical_data['buy_signal'] = (historical_data['short_ma'] > historical_data['long_ma']) & \
                                (historical_data['short_ma'].shift(1) < historical_data['long_ma'].shift(1))

# Step 3: Simulate Trades
# Simulate buying and selling decisions based on the generated signals
historical_data['position'] = historical_data['buy_signal'].astype(int).diff()

# Step 4: Calculate Returns
# Calculate returns based on the simulated trades
historical_data['returns'] = historical_data['position'] * historical_data['Price'].pct_change()

# Step 5: Compute Performance Metrics
# Calculate key performance metrics
cumulative_returns = (1 + historical_data['returns']).cumprod() - 1
sharpe_ratio = (historical_data['returns'].mean() / historical_data['returns'].std()) * (252 ** 0.5)  # Assuming 252 trading days in a year
max_drawdown = (cumulative_returns / cumulative_returns.cummax() - 1).min()

# Step 6: Visualize Results
# Plot the equity curve and other relevant information
historical_data['cumulative_returns'] = cumulative_returns
historical_data[['Price', 'short_ma', 'long_ma']].plot(figsize=(10, 6), title='Moving Average Crossover Strategy')
historical_data['buy_signal'].astype(int).plot(secondary_y=True, marker='o', linestyle='', markersize=5, label='Buy Signal')
plt.show()

# Print performance metrics
print("Cumulative Returns:", cumulative_returns[-1])
print("Sharpe Ratio:", sharpe_ratio)
print("Max Drawdown:", max_drawdown)

historical_data.head()

# @title Price

from matplotlib import pyplot as plt
historical_data['Price'].plot(kind='line', figsize=(8, 4), title='Price')
plt.gca().spines[['top', 'right']].set_visible(False)

